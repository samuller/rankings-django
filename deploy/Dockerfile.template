#
# This template file is used to generate Dockerfile images with less
# duplicated instructions. See: ./run.sh gen-docker
#
# Dockerfile for deploying the Ranking site's API backend & SPA web UI along
# with a Caddy routing server.
#
# Config format reference: https://docs.docker.com/engine/reference/builder/
#
# Build:
#     ./run.sh build
# Run:
#     docker run -t --rm -p 8081:8080 rankings-site:0.0.1
# Debug in container:
#     docker run -it --rm rankings-site:0.0.1 bash
#
# Design:
# - Follow guidelines to make builds fast with layer caching:
#   - Layers: https://docs.docker.com/build/guide/layers/
#   - Cache: https://docs.docker.com/build/cache/
# - Use multi-stages for code re-use and smaller images: https://docs.docker.com/build/guide/multi-stage/
#   - Use `docker build --target <stage-name> ...` to build specific stages.
# - General best practices: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
# - TODO: Reproducible builds: https://medium.com/nttlabs/bit-for-bit-reproducible-builds-with-dockerfile-7cc2b9faed9f
#   - Especially when just changing app version and even on CI.
#
# Inspect each of the docker layers with dive tool:
# ```
# docker run --rm -it \
#     -v /var/run/docker.sock:/var/run/docker.sock \
#     wagoodman/dive:latest rankings-site:0.0.1
# ```
# - It's useful to set file tree (Tab) to filter out the unmodified (Ctrl+U),
#   sort by size (Ctrl+O) and also collapse all directories (Ctrl+Space).
# - Due to a bug with scrolling down in v0.11.0, you might also need to zoom
#   out to see all layers. See: https://github.com/wagoodman/dive/issues/469
#
# Intermediate stages can be built and run separately for debugging by
# using the "--target" flag with the stage's name:
# ```
# docker build --target api-builder -t rankings-site-builder-test -f deploy/Dockerfile .
# docker run -it --rm rankings-site-builder-test bash
# ```
#
ARG DEBIAN_VERSION=bookworm
ARG ALPINE_VERSION=3.18
ARG NODE_VERSION=20.6.1
ARG PYTHON_VERSION=3.8.18
ARG POETRY_VERSION=1.4.2
ARG CADDY_VERSION=2.7.4
ARG GUNICORN_VERSION=21.2.0
# Paths to source code
ARG SRC_API_DIR="./rankings"
ARG SRC_UI_DIR="./svelte-ui"
# Backend API build paths
# We use same workdir as final so virtualenv is created with correct $PATH
ARG API_WORKDIR="/app"
ARG API_POETRY_VENV="/opt/poetry-venv"
ARG API_POETRY_CACHE="/opt/.cache"
ARG API_VENV="$API_WORKDIR/.venv"
# SPA web User interface (UI) build paths
ARG UI_WORKDIR="/build-ui"
ARG UI_BUILD="$UI_WORKDIR/build"
# Paths for final "app" (release container)
ARG APP_API_DIR="/app/api"

# ---------------------------------------------------------------------------- #
########
# Install backend API dependencies with Poetry. See:
# - https://stackoverflow.com/questions/72465421/how-to-use-poetry-with-docker
# - https://gist.github.com/soof-golan/6ebb97a792ccd87816c0bda1e6e8b8c2
# - https://github.com/orgs/python-poetry/discussions/1879
# - https://medium.com/@albertazzir/blazing-fast-python-docker-builds-with-poetry-a78a66f5aed0
########
FROM python:$PYTHON_VERSION-$DEBIAN_VERSION as api-builder
# FROM creates a new build stage, so we need to redeclare any arguments we want to keep.
# See: https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG API_WORKDIR
ARG SRC_API_DIR
ARG POETRY_VERSION
ARG API_POETRY_VENV
ARG API_POETRY_CACHE
ARG GUNICORN_VERSION
# Configure Poetry
# https://python-poetry.org/docs#ci-recommendations
ENV POETRY_HOME="/opt/poetry" \
    POETRY_VENV=$API_POETRY_VENV \
    # Tell Poetry where to place its cache and virtual environment
    POETRY_CACHE_DIR=$API_POETRY_CACHE \
    # Tell poetry to create virtualenv as .venv directory in root of project
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_NO_INTERACTION=1

# Create a virtual environment just for poetry (to install poetry separated
# from system interpreter) and install it with pip
RUN python3 -m venv $POETRY_VENV \
    && $POETRY_VENV/bin/pip install -U pip setuptools \
    && $POETRY_VENV/bin/pip install poetry==${POETRY_VERSION}

# Add "poetry" to PATH
ENV PATH="${PATH}:${POETRY_VENV}/bin"

WORKDIR $API_WORKDIR

# Copy only files that specify dependencies
COPY $SRC_API_DIR/poetry.lock $SRC_API_DIR/pyproject.toml ./

# Validate the project is properly configured
RUN poetry check

# Install dependencies
RUN --mount=type=cache,target=$POETRY_CACHE_DIR poetry install --no-root --without dev --no-cache --no-ansi

# Install gunicorn dependency
RUN poetry run pip install gunicorn==$GUNICORN_VERSION

# ---------------------------------------------------------------------------- #
# Stage to generate static website
FROM node:$NODE_VERSION as ui-builder
ARG UI_WORKDIR
ARG SRC_UI_DIR

WORKDIR $UI_WORKDIR

# Copy only files that specify dependencies
COPY $SRC_UI_DIR/package-lock.json $SRC_UI_DIR/package.json ./
RUN npm ci

COPY $SRC_UI_DIR $UI_WORKDIR
RUN npm run build

# ---------------------------------------------------------------------------- #
# This is an experiment to see how much build size would decrease if the image
# was based on Alpine. The result was a decrease from 300mb to 140mb.
FROM python:$PYTHON_VERSION-alpine$ALPINE_VERSION as combined-app-alpine
ARG API_VENV
ARG SRC_API_DIR
ARG APP_API_DIR
ARG UI_BUILD
# Use "Edge" package repo when you want to get the newest version of packages (instead of stable)
# See: https://stackoverflow.com/questions/52899227/alpine-add-package-from-edge-repository
ENV EDGE_REPO=https://dl-cdn.alpinelinux.org/alpine/edge/community
# Prevent Python creating .pyc files or __pycache__ folders
ENV PYTHONDONTWRITEBYTECODE=1

# The --no-cache includes `apk update` and means we don't have to clear cache afterwards.
# Alpine's Caddy package details:
# - package versions: https://pkgs.alpinelinux.org/packages?name=caddy&branch=v3.18&repo=&arch=&maintainer=
# - package repo:
#   - https://git.alpinelinux.org/aports/tree/community/caddy
#   - https://gitlab.alpinelinux.org/alpine/aports/-/tree/master/community/caddy
RUN apk add --no-cache --repository=$EDGE_REPO caddy \
    && caddy add-package github.com/caddyserver/transform-encoder \
# See: https://caddy.community/t/caddy-service-wont-stay-running-or-start-with-boot-alpine-openrc/20912/9
    && apk add --no-cache libcap-utils \
    && setcap cap_net_bind_service=+ep $(which caddy) \
    && apk del libcap-utils

#
# Import templated app setup code
#
#:-- IMPORT: setup-app.Dockerfile --:#

# ---------------------------------------------------------------------------- #
# The "combined-app" image combines all parts of the site into a single
# container image to simplify getting started easily. The services combined are:
# - Python Django backend (API & database), run via Gunicorn
# - Static SPA website built with Svelte
# - Caddy router
# We follow the one of the suggested recommendations of using "supervisor" to
# manage our multiple services within the Docker container.
# See: https://docs.docker.com/config/containers/multi-service_container/
FROM python:$PYTHON_VERSION-slim-$DEBIAN_VERSION as combined-app-debian
ARG CADDY_VERSION
ARG UI_BUILD
ARG API_VENV
ARG SRC_API_DIR
ARG APP_API_DIR
ARG POETRY_CACHE_DIR
# Set Python to output instantly to Docker logs (also helps prevents crashes losing logs)
ENV PYTHONUNBUFFERED=1 \
    # Prevent Python creating .pyc files or __pycache__ folders
    PYTHONDONTWRITEBYTECODE=1

# Install generally required packages
# We follow this advice to cache apt installs: https://stackoverflow.com/a/72851168
ENV DEBIAN_FRONTEND=noninteractive
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
    && apt-get update && apt-get install -y --no-install-recommends \
    # Commands stripped in "slim" OS versions, but needed for further installs
    curl \
    gnupg \
    # Used as the root process manager
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Install Caddy
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
    && apt-get update && apt-get install -y --no-install-recommends \
    apt-transport-https \
    debian-keyring \
    debian-archive-keyring \
    && curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' \
       | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg \
    && curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' \
       | tee /etc/apt/sources.list.d/caddy-stable.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    caddy=${CADDY_VERSION} \
# Install Caddy plugin for common logging format
# This step can take long or sometimes even hang. See warning at the top of this site:
# https://caddyserver.com/download?package=github.com%2Fcaddyserver%2Ftransform-encoder
    && caddy add-package github.com/caddyserver/transform-encoder \
    && rm -rf /var/lib/apt/lists/*

#
# Import templated app setup code
#
#:-- IMPORT: setup-app.Dockerfile --:#

# Default command to run if nothing else is specified.
CMD ["/usr/bin/supervisord","-c","/app/supervisord.conf"]

# ---------------------------------------------------------------------------- #
# A test version of "combined-app" that starts with example data.
FROM combined-app-debian as test-app

RUN /app/.venv/bin/python api/manage.py loaddata game players
