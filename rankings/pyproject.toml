[tool.poetry]
name = "rankings-django"
version = "4.1.1"
description = ""
authors = ["Simon Muller <samullers@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/samuller/rankings-django"
repository = "https://github.com/samuller/rankings-django"
packages = [
    # Currently only used so we can get version with importlib.metadata.version
    { include = "rankings" }
]
include = ["NOTICE"]

# We prefer to lock our dependencies to exact versions which has the following impact:
# - Pro: increases stability by helping prevent surprise breaking changes
# - Con: prevents us from "easily" getting bug/security fixes
#   - those would only happen anyway whenever our "poetry.lock" file is updated via some means
# - Note: we don't intend our code to be used as a library on which others should depend
# Thus, our approach is to rather take time every now and then to manually go through and update
# our dependencies.
[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
Django = "4.2.15"
trueskill = "0.4.5"
# We prefer Jinja over Django Templating as we migrated our templates from a Flask app
Jinja2 = "3.1.4"
# Add support for the Admin tool to do editing of multiple rows at once
django-mass-edit = "3.5.0"
# Use DRF to easily generate REST/JSON APIs
djangorestframework = "3.15.1"
# Recommended by DRF for filtering capabilities
django-filter = "24.3"
# Needed for improved generation of OpenAPI docs (also to stop django-filter deprecation warnings)
drf-spectacular = "0.27.2"
# Prefer "Github-style" pagination that adds headers instead of changing result
# See: https://docs.github.com/en/rest/guides/traversing-with-pagination
drf-link-header-pagination = "0.2.0"

# We currently use more lenient dependency versions for our dev tools, but
# actually it's just because that's the default - not because we've thought it
# through yet.
[tool.poetry.group.dev.dependencies]
ruff = "0.6.1"
mypy = "^1.11.1"
coverage = "^7.6.1"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
exclude = ["**/migrations/*"]
extend-select = [
    "E", "D", "W", "C90", "YTT", "ASYNC", "ICN", "LOG", "INP",
    "PYI", "ISC", "N", "B", "G", "FBT", "I", "S", "PL", "ANN",
    "SIM", "RET", "TRY", "FURB", "DJ", "DTZ"
]
ignore = ["D105", "D106", "D107", "D212", "D203", "D213", "D413", "D417",
    "ISC003", "G004", "RET501", "RET504", "TRY003",
    # Basically mypy strict checks
    "ANN001", "ANN002", "ANN003", "ANN201", "ANN204", "ANN401", "ANN101",
    # Warning in Ruff format about conflicts (false positive?) - see: https://github.com/astral-sh/ruff/issues/8272
    "ISC001"]

[tool.ruff.lint.per-file-ignores]
# Ignore some checks in tests
"**/test*.py" = ["S101", "S106", "PLR2004"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
exclude = ["**/migrations/*"]

[tool.mypy]
# We only add configs here that can apply equally to our main code and our test code
ignore_missing_imports = true
exclude = ["migrations/"]  # "**/*/migrations/"

[tool.black]
exclude = "migrations/"
# Change black's default line length from 88 to 120 characters.
# line-length = 120

[tool.coverage.run]
branch = true
dynamic_context = "test_function"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
